import { asyncHandler } from "../utils/asyncHandler.js";
import { ApiError } from "../utils/ApiError.js";
import { User } from "../models/user.models.js"
import { FileUploader } from "../utils/cloudinary.js";
import Apiresponse from "../utils/ApiResponse.js";
const registerUser = asyncHandler(async (req, res) => {
    // get user details from frontend
    // validation of data
    // validation for not empty
    // if already user exists: username,email
    // check for images, check for avatar
    // upload them in cloudinary
    // check if images uploaded in cloudinary , avatar
    // create user object in db
    // remove password and refreshtoken from response
    // return res

    const { fullName, email, username, password } = req.body;
    console.log("email : ", email, "password : ", password);

    if (
        [fullName, email, username, password].some((field) => field?.trim() === "")
    ) {
        throw new ApiError(400, "all fields are required");
    }

    if (!email.includes("@")) {
        throw new ApiError(400, "Enter valid email address");
    }

    if (password.length < 8) {
        throw new ApiError(400, "Password contain minimum 8 characters");
    }


    // we can use $ sugn for condition and or nor 
    //  we can use findone method that return the first user that satisfied condition 
    const existedUser = User.findOne({
        $or: [{ username }, { email }]
    })

    if (existedUser) {
        throw new ApiError(409, "Username or email already exists");
    }

    const avatarLocalPath = req.files?.avatar[0].path;
    const coverImageLocalPath = req.files?.coverImage[0].path;

    if (!avatarLocalPath) {
        throw new ApiError(400, "avatar is required");
    }

    // Server takes time for upload the image even though we have use asyncHandler we have use inside async function because we want to not continue untill this process is completed so thats why we have use await


    const avatar = await FileUploader(avatarLocalPath);
    const coverImage = await FileUploader(coverImageLocalPath);

    if (!avatar) {
        throw new ApiError(400, "avatar is required");
    }

    // Create User Object In Db
    const user = await User.create({
        fullName,
        avatar: avatar.url,
        coverImage: coverImage?.url || "", //if not available then ""
        username: username.toLowerCase(),
        email,
        password
    })


    // check whether user is created or not
    // if exist then we can use findById method that can use to find user from _id by defauld generated by mongo db
    // select method by default select all field if you dont want any field from it than you can write -sign and after that field name

    const createdUser = await User.findById(user._id).select(
        "-password -refreshToken"
    )

    if (!createdUser) {
        throw new ApiError(500, "Something went wrong while Registering User")
    }

    // if user is created then return response

    res.status(201).json(
        new Apiresponse(200, createdUser, "User Registered Successfully")
    )
})

export default registerUser;